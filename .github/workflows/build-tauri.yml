name: Build Artifacts

on:
  push:
    branches:
      - main
  workflow_dispatch: # This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            artifact-name: "mac-arm64"
            ext: "dmg"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            artifact-name: "mac-intel"
            ext: "dmg"
          - platform: "ubuntu-22.04"
            args: ""
            artifact-name: "linux"
            ext: "deb"
          - platform: "windows-latest"
            args: ""
            artifact-name: "windows"
            ext: "exe"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install system dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Extract Tauri metadata
        id: meta
        shell: bash
        run: |
          version=$(jq -r '.package.version' src-tauri/tauri.conf.json)
          name=$(jq -r '.package.productName' src-tauri/tauri.conf.json)
          echo "VERSION: $version"
          echo "NAME: $name"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Install frontend dependencies
        run: yarn install

      - name: Build Tauri app
        run: yarn tauri build ${{ matrix.args }}

      - name: Find and rename artifact
        shell: bash
        run: |
          original_file=$(find src-tauri/target -type f -path "*/release/bundle/*" -name "*.${{ matrix.ext }}" | head -n 1)
          echo "Found artifact: $original_file"
          new_file="${{ steps.meta.outputs.name }}_${{ steps.meta.outputs.version }}_${{ matrix.artifact-name }}.${{ matrix.ext }}"
          cp "$original_file" "$new_file"
          echo "renamed_file=$new_file" >> $GITHUB_ENV

      - name: Setup keychain and import certificate
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode the certificate
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > "$CERT_PATH"

          # Create a custom keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import the certificate into the keychain
          security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign

          # Allow codesign to access the certificate
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Make the new keychain default
          security list-keychains -s "$KEYCHAIN_PATH"

      - name: Sign the DMG
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          codesign --deep --force --verify --verbose \
            --options runtime \
            --sign "$CERTIFICATE_ID" \
            "${{ env.renamed_file }}"

      - name: Notarize the DMG
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          xcrun notarytool submit "${{ env.renamed_file }}" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$TEAM_ID" \
            --wait

      - name: Staple the notarization ticket
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          xcrun stapler staple "${{ env.renamed_file }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.meta.outputs.version }}
          name: Release v${{ steps.meta.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.meta.outputs.version }}
          files: ${{ env.renamed_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
